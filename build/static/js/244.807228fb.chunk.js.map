{"version":3,"file":"static/js/244.807228fb.chunk.js","mappings":"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","sources":["views/utilities/users/user.js","../node_modules/@mui/icons-material/AddCircleOutline.js"],"sourcesContent":["import React, { useCallback } from \"react\";\n// material-ui\nimport { Card, Grid } from \"@mui/material\";\nimport Paper from \"@mui/material/Paper\";\nimport { IconButton } from \"@mui/material\";\nimport AddCircleOutlineIcon from '@mui/icons-material/AddCircleOutline';\nimport { Link } from \"react-router-dom\";\n// project imports\nimport MainCard from \"ui-component/cards/MainCard\";\nimport { gridSpacing } from \"store/constant\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TablePagination from \"@mui/material/TablePagination\";\nimport TableRow from \"@mui/material/TableRow\";\nimport { useState, useEffect } from \"react\";\nimport TextField from \"@mui/material/TextField\";\n\nimport { toast } from \"react-hot-toast\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport UserApi from \"apis/user.api\";\nimport { updateAllUser } from \"redux/redux-slice/user.slice\";\n\n// ===============================|| COLOR BOX ||=============================== //\n// ===============================|| UI COLOR ||=============================== //\nexport default function Users() {\n  const dispatch = useDispatch();\n  const userApi = new UserApi();\n\n  const rows = useSelector((state) => state.user.User);\n  const authToken = useSelector((state) => state.user.x_auth_token);\n\n  const [search, setSearch] = React.useState(\"\");\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  const getAllUser = useCallback(async () => {\n    try {\n      const users = await userApi.getAllUser({authToken});\n      if (!users || !users.data.data) {\n        return toast.error(\"no latest users available\");\n      } else {\n        dispatch(updateAllUser(users.data.data));\n        return;\n      }\n    } catch (error) {\n      console.error(error);\n      toast.error(\"Something went wrong\");\n      throw error;\n    }\n  });\n\n  useEffect(() => {\n    getAllUser();\n  }, []);\n\n  function formatDate(date) {\n    return new Date(date).toLocaleString(\"en-us\", {\n      day: \"numeric\",\n      month: \"short\",\n      year: \"numeric\",\n    });\n  }\n\n  return (\n    <>\n      <MainCard\n        title={\n          <Grid\n            container\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n            spacing={gridSpacing}\n          >\n            <Grid item xs={12} md={12}>\n              <TextField\n                fullWidth\n                id=\"outlined-search\"\n                label=\"Search field\"\n                type=\"search\"\n                onChange={(e) => {\n                  setSearch(e.target.value);\n                }}\n              />\n            </Grid>\n          </Grid>\n        }\n        content={false}\n      >\n        {rows ? (\n          <Card>\n            <Paper sx={{ width: \"100%\", overflow: \"hidden\" }}>\n              <TableContainer sx={{ maxHeight: 540 }}>\n                <Table stickyHeader aria-label=\"sticky table\">\n                  <TableHead>\n                    <TableRow>\n                      <TableCell sx={{ pl: 3 }}>S No.</TableCell>\n                      {/* <TableCell>User Id</TableCell> */}\n                      <TableCell>First Name</TableCell>\n                      <TableCell>Last Name</TableCell>\n                      <TableCell>Email</TableCell>\n                      <TableCell>Action</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {rows\n                      .filter((row) =>\n                        search.toLowerCase() === \"\"\n                          ? row\n                          : row.title.toLowerCase().includes(search)\n                      )\n                      .slice(\n                        page * rowsPerPage,\n                        page * rowsPerPage + rowsPerPage\n                      )\n                      .map((row, index) => {\n                        return (\n                          <TableRow\n                            hover\n                            role=\"checkbox\"\n                            tabIndex={-1}\n                            key={index}\n                          >\n                            <TableCell align=\"start\">{index + 1}</TableCell>\n                            <TableCell align=\"start\">{row.firstName}</TableCell>\n                            <TableCell align=\"start\">{row.lastName}</TableCell>\n                            <TableCell align=\"start\">{row.email}</TableCell>\n                            <TableCell>\n                              <Link to={`/add-user`}>\n                                <IconButton\n                                  color=\"primary\"\n                                  aria-label=\"view\"\n                                  size=\"large\"\n                                >\n                                  <AddCircleOutlineIcon sx={{ fontSize: \"1.1rem\" }} />\n                                </IconButton>\n                              </Link>\n                            </TableCell>\n                          </TableRow>\n                        );\n                      })}\n                  </TableBody>\n                </Table>\n              </TableContainer>\n              <TablePagination\n                rowsPerPageOptions={[10, 20, 100]}\n                component=\"div\"\n                count={rows.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onPageChange={handleChangePage}\n                onRowsPerPageChange={handleChangeRowsPerPage}\n              />\n            </Paper>\n          </Card>\n        ) : (\n          <h6>Loading...</h6>\n        )}\n      </MainCard>\n    </>\n  );\n}\n","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4V7zm-1-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\"\n}), 'AddCircleOutline');\nexports.default = _default;"],"names":["Users","dispatch","useDispatch","userApi","UserApi","rows","useSelector","state","user","User","authToken","x_auth_token","search","setSearch","React","page","setPage","rowsPerPage","setRowsPerPage","useState","getAllUser","useCallback","async","users","data","updateAllUser","toast","error","console","useEffect","_jsx","_Fragment","children","MainCard","title","Grid","container","alignItems","justifyContent","spacing","gridSpacing","item","xs","md","TextField","fullWidth","id","label","type","onChange","e","target","value","content","Card","_jsxs","Paper","sx","width","overflow","TableContainer","maxHeight","Table","stickyHeader","TableHead","TableRow","TableCell","pl","TableBody","filter","row","toLowerCase","includes","slice","map","index","hover","role","tabIndex","align","firstName","lastName","email","Link","to","IconButton","color","size","AddCircleOutlineIcon","fontSize","TablePagination","rowsPerPageOptions","component","count","length","onPageChange","handleChangePage","event","newPage","onRowsPerPageChange","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}