{"version":3,"file":"static/js/623.79f72872.chunk.js","mappings":"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","sources":["apis/maps.api.js","views/utilities/maps/map.js","../node_modules/@mui/icons-material/Visibility.js"],"sourcesContent":["import { getTokenLocal } from \"../utils/localStorage.util\";\r\nimport ApiRoutes from \"../configs/endpoints.config\";\r\nimport HttpClient from \"./index.api\";\r\nconst baseURL = process.env.REACT_APP_API_URL;\r\n\r\nclass Maps extends HttpClient {\r\n  constructor() {\r\n    super(baseURL);\r\n    this._initializeRequestInterceptor();\r\n    this._initializeResponseInterceptor();\r\n  }\r\n\r\n  _initializeRequestInterceptor = () => {\r\n    this.instance.interceptors.request.use((config) => {\r\n      config.headers[\"Authorization\"] = `Bearer ${getTokenLocal()}`;\r\n      return config;\r\n    });\r\n  };\r\n\r\n  _initializeResponseInterceptor = () => {\r\n    this.instance.interceptors.response.use(\r\n      (response) => {\r\n        return response;\r\n      },\r\n      (response) => {\r\n        return Promise.resolve(response);\r\n      }\r\n    );\r\n  };\r\n\r\n  MapsConfig = ApiRoutes.Map.GetMap;\r\n  UpdateMapsConfig = ApiRoutes.Map.UpdateMap;\r\n\r\n  getMap = async (data) => {\r\n    return this.instance({\r\n      method: this.MapsConfig.Method,\r\n      url: this.MapsConfig.Endpoint,\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n      },\r\n      data: data,\r\n    });\r\n  };\r\n  UpdateMap = async (data) => {\r\n    return this.instance({\r\n      method: this.UpdateMapsConfig.Method,\r\n      url: this.UpdateMapsConfig.Endpoint,\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n      },\r\n      data: data,\r\n    });\r\n  };\r\n}\r\n\r\nexport default Maps;\r\n","import React, { useCallback } from \"react\";\r\n// material-ui\r\nimport { Card } from \"@mui/material\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport EditIcon from \"@mui/icons-material/Edit\";\r\nimport VisibilityIcon from \"@mui/icons-material/Visibility\";\r\n\r\nimport { IconButton } from \"@mui/material\";\r\nimport { Link } from \"react-router-dom\";\r\n// project imports\r\nimport MainCard from \"ui-component/cards/MainCard\";\r\nimport Table from \"@mui/material/Table\";\r\nimport TableBody from \"@mui/material/TableBody\";\r\nimport TableCell from \"@mui/material/TableCell\";\r\nimport TableContainer from \"@mui/material/TableContainer\";\r\nimport TableHead from \"@mui/material/TableHead\";\r\nimport TableRow from \"@mui/material/TableRow\";\r\nimport { useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nimport { toast } from \"react-hot-toast\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport MapApi from \"apis/maps.api\";\r\nimport { updateMap } from \"redux/redux-slice/maps.slice\";\r\n\r\n// ===============================|| COLOR BOX ||=============================== //\r\n// ===============================|| UI COLOR ||=============================== //\r\nexport default function Users() {\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n  const mapApi = new MapApi();\r\n\r\n  const rows = useSelector((state) => state.maps.Maps);\r\n\r\n  const getMap = useCallback(async () => {\r\n    try {\r\n      const maps = await mapApi.getMap();\r\n      if (maps || maps.data.data) {\r\n        dispatch(updateMap(maps.data.data));\r\n        return;\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      toast.error(\"Something went wrong\");\r\n      throw error;\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    getMap();\r\n  }, []);\r\n\r\n  function formatDate(date) {\r\n    return new Date(date).toLocaleString(\"en-us\", {\r\n      day: \"numeric\",\r\n      month: \"short\",\r\n      year: \"numeric\",\r\n    });\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <MainCard content={false}>\r\n        {rows ? (\r\n          <Card>\r\n            <Paper sx={{ width: \"100%\", overflow: \"hidden\" }}>\r\n              <TableContainer sx={{ maxHeight: 540 }}>\r\n                <Table stickyHeader aria-label=\"sticky table\">\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell sx={{ pl: 3 }}>S No.</TableCell>\r\n                      <TableCell>Date Time</TableCell>\r\n                      <TableCell>Image</TableCell>\r\n                      <TableCell>Action</TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {rows.map((row, index) => {\r\n                      return (\r\n                        <TableRow\r\n                          hover\r\n                          role=\"checkbox\"\r\n                          tabIndex={-1}\r\n                          key={index}\r\n                        >\r\n                          <TableCell align=\"start\">{index + 1}</TableCell>\r\n\r\n                          <TableCell align=\"start\">\r\n                            {row.createdAt ? formatDate(row.createdAt) : \"-\"}\r\n                          </TableCell>\r\n                          <TableCell align=\"start\">\r\n                            <img src={row.url} width=\"200px\" />\r\n                          </TableCell>\r\n\r\n                          <TableCell>\r\n                            <a href={row.url} target=\"_blank\">\r\n                              <IconButton\r\n                                color=\"primary\"\r\n                                aria-label=\"view\"\r\n                                size=\"large\"\r\n                              >\r\n                                <VisibilityIcon sx={{ fontSize: \"1.1rem\" }} />\r\n                              </IconButton>\r\n                            </a>\r\n                            <Link to={`/edit-map/${row.mapId}`}>\r\n                              <IconButton\r\n                                color=\"primary\"\r\n                                aria-label=\"edit\"\r\n                                size=\"large\"\r\n                              >\r\n                                <EditIcon sx={{ fontSize: \"1.1rem\" }} />\r\n                              </IconButton>\r\n                            </Link>\r\n                          </TableCell>\r\n                        </TableRow>\r\n                      );\r\n                    })}\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n            </Paper>\r\n          </Card>\r\n        ) : (\r\n          <h6>Loading...</h6>\r\n        )}\r\n      </MainCard>\r\n    </>\r\n  );\r\n}\r\n","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z\"\n}), 'Visibility');\nexports.default = _default;"],"names":["Maps","HttpClient","constructor","super","process","_initializeRequestInterceptor","this","instance","interceptors","request","use","config","headers","getTokenLocal","_initializeResponseInterceptor","response","Promise","resolve","MapsConfig","ApiRoutes","Map","GetMap","UpdateMapsConfig","UpdateMap","getMap","async","method","Method","url","Endpoint","data","Users","useNavigate","dispatch","useDispatch","mapApi","MapApi","rows","useSelector","state","maps","useCallback","updateMap","error","console","toast","useEffect","_jsx","_Fragment","children","MainCard","content","Card","Paper","sx","width","overflow","TableContainer","maxHeight","_jsxs","Table","stickyHeader","TableHead","TableRow","TableCell","pl","TableBody","map","row","index","hover","role","tabIndex","align","createdAt","date","Date","toLocaleString","day","month","year","src","href","target","IconButton","color","size","VisibilityIcon","fontSize","Link","to","mapId","EditIcon","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}