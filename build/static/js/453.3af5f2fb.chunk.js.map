{"version":3,"file":"static/js/453.3af5f2fb.chunk.js","mappings":"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","sources":["apis/post.api.js","views/utilities/post/post.js"],"sourcesContent":["import { getTokenLocal } from \"../utils/localStorage.util\";\r\nimport ApiRoutes from \"../configs/endpoints.config\";\r\nimport HttpClient from \"./index.api\";\r\nconst baseURL = process.env.REACT_APP_API_URL;\r\n\r\nclass Post extends HttpClient {\r\n  constructor() {\r\n    super(baseURL);\r\n    this._initializeRequestInterceptor();\r\n    this._initializeResponseInterceptor();\r\n  }\r\n\r\n  _initializeRequestInterceptor = () => {\r\n    this.instance.interceptors.request.use((config) => {\r\n      config.headers[\"Authorization\"] = `Bearer ${getTokenLocal()}`;\r\n      return config;\r\n    });\r\n  };\r\n\r\n  _initializeResponseInterceptor = () => {\r\n    this.instance.interceptors.response.use(\r\n      (response) => {\r\n        return response;\r\n      },\r\n      (response) => {\r\n        return Promise.resolve(response);\r\n      }\r\n    );\r\n  };\r\n\r\n  AllPostConfig = ApiRoutes.Post.All;\r\n  PostByIdConfig = ApiRoutes.Post.PostById;\r\n  EditPostConfig = ApiRoutes.Post.EditPost;\r\n  AddPostConfig = ApiRoutes.Post.AddPost;\r\n  DeletePostConfig = ApiRoutes.Post.DeletePost;\r\n\r\n  getAllPost = async () => {\r\n    return this.instance({\r\n      method: this.AllPostConfig.Method,\r\n      url: this.AllPostConfig.Endpoint,\r\n      headers: {},\r\n      data: null,\r\n    });\r\n  };\r\n  getPostById = async (data) => {\r\n    return this.instance({\r\n      method: this.PostByIdConfig.Method,\r\n      url: this.PostByIdConfig.Endpoint,\r\n      headers: {},\r\n      data: data,\r\n    });\r\n  };\r\n  addPost = async (data) => {\r\n    return this.instance({\r\n      method: this.AddPostConfig.Method,\r\n      url: this.AddPostConfig.Endpoint,\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n      },\r\n      data: data,\r\n    });\r\n  };\r\n  editPost = async (data) => {\r\n    return this.instance({\r\n      method: this.EditPostConfig.Method,\r\n      url: this.EditPostConfig.Endpoint,\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n      },\r\n      data: data,\r\n    });\r\n  };\r\n  deletePost = async (data) => {\r\n    return this.instance({\r\n      method: this.DeletePostConfig.Method,\r\n      url: this.DeletePostConfig.Endpoint,\r\n      headers: {},\r\n      data: data,\r\n    });\r\n  };\r\n}\r\n\r\nexport default Post;\r\n","import React, { useCallback } from \"react\";\r\n// material-ui\r\nimport { Card, Grid, Typography, Button, Chip } from \"@mui/material\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport EditIcon from \"@mui/icons-material/Edit\";\r\nimport { IconButton } from \"@mui/material\";\r\nimport { Link } from \"react-router-dom\";\r\n// project imports\r\nimport MainCard from \"ui-component/cards/MainCard\";\r\nimport { gridSpacing } from \"store/constant\";\r\nimport Table from \"@mui/material/Table\";\r\nimport TableBody from \"@mui/material/TableBody\";\r\nimport TableCell from \"@mui/material/TableCell\";\r\nimport TableContainer from \"@mui/material/TableContainer\";\r\nimport TableHead from \"@mui/material/TableHead\";\r\nimport TablePagination from \"@mui/material/TablePagination\";\r\nimport TableRow from \"@mui/material/TableRow\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport TextField from \"@mui/material/TextField\";\r\n\r\nimport { toast } from \"react-hot-toast\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport PostApi from \"apis/post.api\";\r\nimport { updateAllPost } from \"redux/redux-slice/post.slice\";\r\n\r\n// ===============================|| COLOR BOX ||=============================== //\r\n// ===============================|| UI COLOR ||=============================== //\r\nexport default function Users() {\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n  const postApi = new PostApi();\r\n\r\n  const rows = useSelector((state) => state.post.Post);\r\n  const [search, setSearch] = React.useState(\"\");\r\n\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(+event.target.value);\r\n    setPage(0);\r\n  };\r\n\r\n  const handleDelete = async (postId) => {\r\n    try {\r\n      const deletePostResponse = await postApi.deletePost({ postId });\r\n      if (deletePostResponse && deletePostResponse?.data?.code === 200) {\r\n        getAllPost();\r\n        return toast.success(\"Deleted Successfully\");\r\n      } else {\r\n        return toast.error(deletePostResponse.data?.message);\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      toast.error(\"Something went wrong\");\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const getAllPost = useCallback(async () => {\r\n    try {\r\n      const posts = await postApi.getAllPost();\r\n      if (!posts || !posts.data.data) {\r\n        return toast.error(\"no latest posts available\");\r\n      } else {\r\n        dispatch(updateAllPost(posts.data.data));\r\n        return;\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      toast.error(\"Something went wrong\");\r\n      throw error;\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    getAllPost();\r\n  }, []);\r\n\r\n  function formatDate(date) {\r\n    return new Date(date).toLocaleString(\"en-us\", {\r\n      day: \"numeric\",\r\n      month: \"short\",\r\n      year: \"numeric\",\r\n    });\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <MainCard\r\n        title={\r\n          <Grid\r\n            container\r\n            alignItems=\"center\"\r\n            justifyContent=\"space-between\"\r\n            spacing={gridSpacing}\r\n          >\r\n            <Grid item xs={12} md={12}>\r\n              <TextField\r\n                fullWidth\r\n                id=\"outlined-search\"\r\n                label=\"Search field\"\r\n                type=\"search\"\r\n                onChange={(e) => {\r\n                  setSearch(e.target.value);\r\n                }}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        }\r\n        content={false}\r\n      >\r\n        {rows ? (\r\n          <Card>\r\n            <Paper sx={{ width: \"100%\", overflow: \"hidden\" }}>\r\n              <TableContainer sx={{ maxHeight: 540 }}>\r\n                <Table stickyHeader aria-label=\"sticky table\">\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell sx={{ pl: 3 }}>S No.</TableCell>\r\n                      <TableCell>Date Time</TableCell>\r\n                      <TableCell>Image</TableCell>\r\n                      <TableCell>Title</TableCell>\r\n                      <TableCell>Type</TableCell>\r\n                      <TableCell>Action</TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {rows\r\n                      .filter((row) =>\r\n                        search.toLowerCase() === \"\"\r\n                          ? row\r\n                          : row.title.toLowerCase().includes(search)\r\n                      )\r\n                      .slice(\r\n                        page * rowsPerPage,\r\n                        page * rowsPerPage + rowsPerPage\r\n                      )\r\n                      .map((row, index) => {\r\n                        return (\r\n                          <TableRow\r\n                            hover\r\n                            role=\"checkbox\"\r\n                            tabIndex={-1}\r\n                            key={index}\r\n                          >\r\n                            <TableCell align=\"start\">{index + 1}</TableCell>\r\n\r\n                            <TableCell align=\"start\">\r\n                              {row.createdAt ? formatDate(row.createdAt) : \"-\"}\r\n                            </TableCell>\r\n                            <TableCell align=\"start\">\r\n                              {row.type === \"Video\" ? (\r\n                                <>\r\n                                  <video width=\"100px\" controls>\r\n                                    <source src={row.url} type=\"video/mp4\" />\r\n                                  </video>\r\n                                </>\r\n                              ) : (\r\n                                <>\r\n                                  <img src={row.url} width=\"100px\" />\r\n                                </>\r\n                              )}\r\n                            </TableCell>\r\n                            <TableCell align=\"start\">{row.title}</TableCell>\r\n                            <TableCell align=\"start\">{row.type}</TableCell>\r\n\r\n                            <TableCell>\r\n                              <Link to={`/edit-post/${row.postId}`}>\r\n                                <IconButton\r\n                                  color=\"primary\"\r\n                                  aria-label=\"view\"\r\n                                  size=\"large\"\r\n                                >\r\n                                  <EditIcon sx={{ fontSize: \"1.1rem\" }} />\r\n                                </IconButton>\r\n                              </Link>\r\n                              <IconButton\r\n                                onClick={(e) => {\r\n                                  handleDelete(row.postId);\r\n                                }}\r\n                                color=\"primary\"\r\n                                aria-label=\"view\"\r\n                                size=\"large\"\r\n                              >\r\n                                <DeleteIcon sx={{ fontSize: \"1.1rem\" }} />\r\n                              </IconButton>\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        );\r\n                      })}\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n              <TablePagination\r\n                rowsPerPageOptions={[10, 20, 100]}\r\n                component=\"div\"\r\n                count={rows.length}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                onPageChange={handleChangePage}\r\n                onRowsPerPageChange={handleChangeRowsPerPage}\r\n              />\r\n            </Paper>\r\n          </Card>\r\n        ) : (\r\n          <h6>Loading...</h6>\r\n        )}\r\n      </MainCard>\r\n    </>\r\n  );\r\n}\r\n"],"names":["Post","HttpClient","constructor","super","process","_initializeRequestInterceptor","this","instance","interceptors","request","use","config","headers","getTokenLocal","_initializeResponseInterceptor","response","Promise","resolve","AllPostConfig","ApiRoutes","All","PostByIdConfig","PostById","EditPostConfig","EditPost","AddPostConfig","AddPost","DeletePostConfig","DeletePost","getAllPost","async","method","Method","url","Endpoint","data","getPostById","addPost","editPost","deletePost","Users","useNavigate","dispatch","useDispatch","postApi","PostApi","rows","useSelector","state","post","search","setSearch","React","page","setPage","rowsPerPage","setRowsPerPage","useState","useCallback","posts","updateAllPost","toast","error","console","useEffect","_jsx","_Fragment","children","MainCard","title","Grid","container","alignItems","justifyContent","spacing","gridSpacing","item","xs","md","TextField","fullWidth","id","label","type","onChange","e","target","value","content","Card","_jsxs","Paper","sx","width","overflow","TableContainer","maxHeight","Table","stickyHeader","TableHead","TableRow","TableCell","pl","TableBody","filter","row","toLowerCase","includes","slice","map","index","hover","role","tabIndex","align","createdAt","date","Date","toLocaleString","day","month","year","controls","src","Link","to","postId","IconButton","color","size","EditIcon","fontSize","onClick","_deletePostResponse$d","deletePostResponse","code","success","_deletePostResponse$d2","message","handleDelete","DeleteIcon","TablePagination","rowsPerPageOptions","component","count","length","onPageChange","handleChangePage","event","newPage","onRowsPerPageChange"],"sourceRoot":""}