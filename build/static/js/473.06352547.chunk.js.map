{"version":3,"file":"static/js/473.06352547.chunk.js","mappings":"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","sources":["ui-component/cards/Skeleton/EarningCard.js","assets/images/icons/earning.svg","views/dashboard/Default/EarningCard.js","apis/dashboard.api.js","ui-component/cards/TotalLineChartCard.js","views/dashboard/Default/index.js"],"sourcesContent":["// material-ui\nimport { Card, CardContent, Grid } from '@mui/material';\nimport Skeleton from '@mui/material/Skeleton';\n\n// ==============================|| SKELETON - EARNING CARD ||============================== //\n\nconst EarningCard = () => (\n    <Card>\n        <CardContent>\n            <Grid container direction=\"column\">\n                <Grid item>\n                    <Grid container justifyContent=\"space-between\">\n                        <Grid item>\n                            <Skeleton variant=\"rectangular\" width={44} height={44} />\n                        </Grid>\n                        <Grid item>\n                            <Skeleton variant=\"rectangular\" width={34} height={34} />\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item>\n                    <Skeleton variant=\"rectangular\" sx={{ my: 2 }} height={40} />\n                </Grid>\n                <Grid item>\n                    <Skeleton variant=\"rectangular\" height={30} />\n                </Grid>\n            </Grid>\n        </CardContent>\n    </Card>\n);\n\nexport default EarningCard;\n","var _path, _path2, _path3;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgEarning(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M19 9H9C7.89543 9 7 9.89543 7 11V17C7 18.1046 7.89543 19 9 19H19C20.1046 19 21 18.1046 21 17V11C21 9.89543 20.1046 9 19 9Z\",\n    stroke: \"white\",\n    strokeWidth: 1.5,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M14 16C15.1046 16 16 15.1046 16 14C16 12.8954 15.1046 12 14 12C12.8954 12 12 12.8954 12 14C12 15.1046 12.8954 16 14 16Z\",\n    fill: \"#90CAF9\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M17 9V7C17 6.46957 16.7893 5.96086 16.4142 5.58579C16.0391 5.21071 15.5304 5 15 5H5C4.46957 5 3.96086 5.21071 3.58579 5.58579C3.21071 5.96086 3 6.46957 3 7V13C3 13.5304 3.21071 14.0391 3.58579 14.4142C3.96086 14.7893 4.46957 15 5 15H7\",\n    stroke: \"white\",\n    strokeWidth: 1.5,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgEarning);\nexport default __webpack_public_path__ + \"static/media/earning.b019e86a7ee117bd6bb2e8cab90c0db5.svg\";\nexport { ForwardRef as ReactComponent };","import PropTypes from 'prop-types';\nimport { useState } from 'react';\n\n// material-ui\nimport { styled, useTheme } from '@mui/material/styles';\nimport { Avatar, Box, Grid, Menu, MenuItem, Typography } from '@mui/material';\n\n// project imports\nimport MainCard from 'ui-component/cards/MainCard';\nimport SkeletonEarningCard from 'ui-component/cards/Skeleton/EarningCard';\n\n// assets\nimport EarningIcon from 'assets/images/icons/earning.svg';\nimport ArrowUpwardIcon from '@mui/icons-material/ArrowUpward';\n\nimport {\n    IconReport,\n    IconBuildingBank,\n    IconCurrencyRupee,\n    IconDatabase,\n    IconChartCandle,\n    IconUsers,\n    IconFileText,\n    IconQuestionMark,\n    IconFolder,\n    IconBooks\n} from \"@tabler/icons\";\n\n// constant\nconst icons = {\n    IconReport,\n    IconBuildingBank,\n    IconCurrencyRupee,\n    IconDatabase,\n    IconChartCandle,\n    IconUsers,\n    IconFileText,\n    IconQuestionMark,\n    IconFolder,\n    IconBooks\n};\nconst CardWrapper = styled(MainCard)(({ theme }) => ({\n    // backgroundColor: theme.palette.secondary.dark,\n    backgroundColor: '#5b2548',\n    color: '#fff',\n    overflow: 'hidden',\n    position: 'relative',\n    '&:after': {\n        content: '\"\"',\n        position: 'absolute',\n        width: 210,\n        height: 210,\n        // background: theme.palette.secondary[800],\n        background: '#b75f98',\n        borderRadius: '50%',\n        top: -85,\n        right: -95,\n        [theme.breakpoints.down('sm')]: {\n            top: -105,\n            right: -140\n        }\n    },\n    '&:before': {\n        content: '\"\"',\n        position: 'absolute',\n        width: 210,\n        height: 210,\n        // background: theme.palette.secondary[800],\n        background: '#b75394',\n        borderRadius: '50%',\n        top: -125,\n        right: -15,\n        opacity: 0.5,\n        [theme.breakpoints.down('sm')]: {\n            top: -155,\n            right: -70\n        }\n    }\n}));\n\n// ===========================|| DASHBOARD DEFAULT - EARNING CARD ||=========================== //\n\nconst EarningCard = ({ isLoading, isCount ,isTitle}) => {\n    const theme = useTheme();\n\n    return (\n        <>\n            {isLoading ? (\n                <SkeletonEarningCard />\n            ) : (\n                <CardWrapper border={false} content={false}>\n                    <Box sx={{ p: 2.25 }}>\n                        <Grid container direction=\"column\">\n                            <Grid item>\n                                <Grid container justifyContent=\"space-between\">\n                                    <Grid item>\n                                        <Avatar\n                                            variant=\"rounded\"\n                                            sx={{\n                                                ...theme.typography.commonAvatar,\n                                                ...theme.typography.largeAvatar,\n                                                // backgroundColor: theme.palette.secondary[800],\n                                                backgroundColor: '#b75f98',\n                                                mt: 1\n                                            }}\n                                        >\n                                            <img src={EarningIcon} alt=\"Notification\" />\n                                        </Avatar>\n                                    </Grid>\n                                  \n                                </Grid>\n                            </Grid>\n                            <Grid item>\n                                <Grid container alignItems=\"center\">\n                                    <Grid item>\n                                        <Typography sx={{ fontSize: '2.125rem', fontWeight: 500, mr: 1, mt: 1.75, mb: 0.75 }}>\n                                            {isCount}\n                                        </Typography>\n                                    </Grid>\n                                    <Grid item>\n                                        <Avatar\n                                            sx={{\n                                                cursor: 'pointer',\n                                                ...theme.typography.smallAvatar,\n                                                backgroundColor: theme.palette.secondary[200],\n                                                color: theme.palette.secondary.dark\n                                            }}\n                                        >\n                                            <ArrowUpwardIcon fontSize=\"inherit\" sx={{ transform: 'rotate3d(1, 1, 1, 45deg)' }} />\n                                        </Avatar>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                            <Grid item sx={{ mb: 1.25 }}>\n                                <Typography\n                                    sx={{\n                                        fontSize: '1rem',\n                                        fontWeight: 500,\n                                        color: theme.palette.secondary[200]\n                                    }}\n                                >\n                                   {isTitle}\n                                </Typography>\n                            </Grid>\n                        </Grid>\n                    </Box>\n                </CardWrapper>\n            )}\n        </>\n    );\n};\n\nEarningCard.propTypes = {\n    isLoading: PropTypes.bool\n};\n\nexport default EarningCard;\n","import { getTokenLocal } from \"../utils/localStorage.util\";\nimport ApiRoutes from \"../configs/endpoints.config\";\nimport HttpClient from \"./index.api\";\nconst baseURL = process.env.REACT_APP_API_URL;\nconst AuthKey = process.env.REACT_APP_AUTH_KEY;\n\nclass Dashboard extends HttpClient {\n  constructor() {\n    super(baseURL);\n    this._initializeRequestInterceptor();\n    this._initializeResponseInterceptor();\n  }\n\n  _initializeRequestInterceptor = () => {\n    this.instance.interceptors.request.use((config) => {\n      config.headers[\"Authorization\"] = `Bearer ${getTokenLocal()}`;\n      config.headers[\"AuthKey\"] = `${AuthKey}`;\n\n      return config;\n    });\n  };\n\n  _initializeResponseInterceptor = () => {\n    this.instance.interceptors.response.use(\n      (response) => {\n        return response;\n      },\n      (response) => {\n        return Promise.resolve(response);\n      }\n    );\n  };\n\n  DashboardConfig = ApiRoutes.Dashboard.Data;\n\n  getDashboard = async () => {\n    return this.instance({\n      method: this.DashboardConfig.Method,\n      url: this.DashboardConfig.Endpoint,\n      headers: {},\n      data: null,\n    });\n  };\n}\n\nexport default Dashboard;\n","import PropTypes from 'prop-types';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport { Box, Card, Grid, Typography } from '@mui/material';\n\n// third party\nimport Chart from 'react-apexcharts';\n\n// ============================|| TOTAL LINE CHART CARD ||============================ //\n\nconst TotalLineChartCard = ({ bgColor, chartData, title, percentage, value,footerData }) => {\n    const theme = useTheme();\n\n    let footerHtml;\n    if (footerData) {\n        footerHtml = footerData.map((item, index) => (\n            <Grid item key={index}>\n                <Box\n                    sx={{\n                        mt: 3,\n                        mb: 3,\n                        p: 1\n                    }}\n                >\n                    <Grid container direction=\"column\" spacing={1} alignItems=\"center\">\n                        <Typography variant=\"h3\" sx={{ mb: 1 }}>\n                            {item.value}\n                        </Typography>\n                        <Typography variant=\"body1\">{item.label}</Typography>\n                    </Grid>\n                </Box>\n            </Grid>\n        ));\n    }\n    return (\n        <Card>\n            <Box sx={{ color: '#fff', bgcolor: bgColor || theme.palette.primary.dark}}>\n                <Box sx={{ p: 2.5 }}>\n                    <Grid container direction=\"column\">\n                        <Grid item container justifyContent=\"space-between\" alignItems=\"center\">\n                            {value && (\n                                <Grid item>\n                                    <Typography variant=\"h3\" color=\"inherit\">\n                                        {value}\n                                    </Typography>\n                                </Grid>\n                            )}\n                            {percentage && (\n                                <Grid item>\n                                    <Typography variant=\"body2\" color=\"inherit\">\n                                        {percentage}\n                                    </Typography>\n                                </Grid>\n                            )}\n                        </Grid>\n                        {title && (\n                            <Grid item>\n                                <Typography variant=\"body2\" color=\"inherit\">\n                                    {title}\n                                </Typography>\n                            </Grid>\n                        )}\n                    </Grid>\n                </Box>\n                {chartData && <Chart {...chartData} />}\n            </Box>  \n            {footerData && (\n                <Grid container justifyContent=\"space-around\" alignItems=\"center\">\n                    {footerHtml}\n                </Grid>\n            )}\n        </Card>\n    );\n};\n\nTotalLineChartCard.propTypes = {\n    bgColor: PropTypes.string,\n    chartData: PropTypes.object,\n    title: PropTypes.string,\n    percentage: PropTypes.string,\n    footerData: PropTypes.array,\n    value: PropTypes.number\n};\n\nexport default TotalLineChartCard;","import { useCallback, useEffect, useState } from \"react\";\n\n// material-ui\nimport { Grid } from \"@mui/material\";\n\n// project imports\nimport EarningCard from \"./EarningCard\";\n// import BajajAreaChartCard from \"./TotalGrowthBarChart\";\n// import TotalVoteChart from \"./TotalVoteChart\";\nimport { gridSpacing } from \"store/constant\";\nimport DashboardApi from \"apis/dashboard.api\";\nimport { toast } from \"react-hot-toast\";\nimport { useDispatch, useSelector } from 'react-redux';\n// ==============================|| DEFAULT DASHBOARD ||============================== //\nimport { useTheme } from \"@mui/material/styles\";\nimport TotalLineChartCard from \"ui-component/cards/TotalLineChartCard\";\nimport {TotalOrder,TotalUser} from '../../../redux/redux-slice/dashboard.slice'\n\nconst Dashboard = () => {\n  const dispatch = useDispatch();\n  const dashboardApi = new DashboardApi();\n  const [isLoading, setLoading] = useState(true);\n  const theme = new useTheme();\n  const User = useSelector((state) => state.dashBoard.totalUser);\n  const Order = useSelector((state) => state.dashBoard.totalOrder);\n\n  const [natural, setNatural] = useState('0');\n  const [labgrown, setLabgrown] = useState('0');\n  const backColor = \"#42032C\"\n  var UserTotal = {\n    month: User.month,\n    total: User.total,\n    current: User.length != 0 ? User.month[User.month.length - 1] : 0,\n    };\n  var OrderTotal = {\n    month: Order.month,\n    total: Order.total,\n    current: Order.length != 0 ? Order.month[Order.month.length - 1] : 0,\n    };\n\n  const getDashboard = useCallback(async () => {\n    try {\n      const dashboardData = await dashboardApi.getDashboard();\n      if (!dashboardData || !dashboardData.data) {\n        return toast.error(\"No Data  available\");\n      } else {\n        setNatural(dashboardData.data.natural);\n        setLabgrown(dashboardData.data.lab);\n        dispatch(TotalUser(dashboardData.data.user))\n        dispatch(TotalOrder(dashboardData.data.order))\n        setLoading(false);\n        return;\n      }\n    } catch (error) {\n      console.error(error);\n      toast.error(\"Something went wrong\");\n      throw error;\n    }\n  });\n\n  useEffect(() => {\n    getDashboard();\n  }, []);\n\n\n\n  var UserOption = {\n    type: \"area\",\n    height: 100,\n    options: {\n      chart: {\n        sparkline: {\n          enabled: true,\n        },\n      },\n      dataLabels: {\n        enabled: false,\n      },\n      colors: [\"#fff\"],\n      fill: {\n        type: \"solid\",\n        opacity: 0.4,\n      },\n      stroke: {\n        curve: \"smooth\",\n        width: 3,\n      },\n      yaxis: {\n        min: 0,\n        max: 30,\n      },\n      tooltip: {\n        theme: \"dark\",\n        fixed: {\n          enabled: false,\n        },\n        x: {\n          show: false,\n        },\n        y: {\n          title: {\n            formatter: () => \"Total User\",\n          },\n        },\n        marker: {\n          show: false,\n        },\n      },\n    },\n    series: [\n      {\n        name: \"series1\",\n        data: UserTotal.month,\n      },\n    ],\n  };\n  var OrderOption = {\n    type: \"area\",\n    height: 100,\n    options: {\n      chart: {\n        sparkline: {\n          enabled: true,\n          colors: [\"#000\"],\n        },\n      },\n      dataLabels: {\n        enabled: false,\n      },\n      colors: [\"#fff\"],\n      fill: {\n        type: \"solid\",\n        opacity: 0.4,\n      },\n      stroke: {\n        curve: \"smooth\",\n        width: 3,\n      },\n      yaxis: {\n        min: 0,\n        max: 30,\n      },\n      tooltip: {\n        theme: \"dark\",\n        fixed: {\n          enabled: false,\n        },\n        x: {\n          show: false,\n        },\n        y: {\n          title: {\n            formatter: () => \"Total Order\",\n          },\n        },\n        marker: {\n          show: false,\n        },\n      },\n    },\n    series: [\n      {\n        name: \"series1\",\n        data: OrderTotal.month,\n      },\n    ],\n  }\n  return (\n    <Grid container spacing={gridSpacing}>\n      <Grid item xs={12} md={6} sm={6} lg={4}>\n        <TotalLineChartCard\n          // bgColor={theme.palette.common.black}\n          bgColor=\"#5b2548\"\n          chartData={UserOption}\n          title=\"Total User\"\n          footerData={[\n            {\n              value: `${UserTotal.total}`,\n              label: \"Total User\",\n            },\n            {\n              value: `${UserTotal.current}`,\n              label: \"Current Month User\",\n            },\n          ]}\n        />\n      </Grid>\n      <Grid item xs={12} md={6} sm={6} lg={4}>\n        <TotalLineChartCard\n            bgColor=\"#5b2548\"\n          //  bgColor={theme.palette.common.black}\n          chartData={OrderOption}\n          title=\"Total Order\"\n          footerData={[\n            {\n              value: `${OrderTotal.total}`,\n              label: \"Total Order\",\n            },\n            {\n              value: `${OrderTotal.current}`,\n              label: \"Current Month Order\",\n            },\n          ]}\n        />\n      </Grid>\n      <Grid item xs={12}>\n        <Grid container spacing={gridSpacing}>\n          <Grid item lg={4} md={6} sm={6} xs={12}>\n            <EarningCard\n              isLoading={isLoading}\n              isCount={natural}\n              isTitle={`Total Natural`}\n            />\n          </Grid>\n          <Grid item lg={4} md={6} sm={6} xs={12}>\n            <EarningCard\n              isLoading={isLoading}\n              isCount={labgrown}\n              isTitle={`Total LabGrown`}\n            />\n          </Grid>\n          {/* <Grid item lg={4} md={6} sm={6} xs={12}>\n            <EarningCard\n              isLoading={isLoading}\n              // isCount={voter}\n              isTitle={`Total Voters`}\n            />\n          </Grid> */}\n{/* \n          <Grid item lg={4} md={6} sm={6} xs={12}>\n            <EarningCard\n              isLoading={isLoading}\n              // isCount={news}\n              isTitle={`Total News`}\n            />\n          </Grid>\n          <Grid item lg={4} md={6} sm={6} xs={12}>\n            <EarningCard\n              isLoading={isLoading}\n              // isCount={task}\n              isTitle={`Total Task`}\n            />\n          </Grid>\n          <Grid item lg={4} md={6} sm={6} xs={12}>\n            <EarningCard\n              isLoading={isLoading}\n              // isCount={post}\n              isTitle={`Total Post`}\n            />\n          </Grid> */}\n\n          <Grid item lg={6} md={6} sm={12} xs={12}>\n            {/* <BajajAreaChartCard isLoading={isLoading} isData={voterView} /> */}\n          </Grid>\n          <Grid item lg={6} md={6} sm={12} xs={12}>\n            {/* <TotalVoteChart isData={data} /> */}\n          </Grid>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Dashboard;\n"],"names":["EarningCard","_jsx","Card","children","CardContent","_jsxs","Grid","container","direction","item","justifyContent","Skeleton","variant","width","height","sx","my","CardWrapper","styled","MainCard","_ref","theme","backgroundColor","color","overflow","position","content","background","borderRadius","top","right","breakpoints","down","opacity","_ref2","isLoading","isCount","isTitle","useTheme","_Fragment","SkeletonEarningCard","border","Box","p","Avatar","typography","commonAvatar","largeAvatar","mt","src","EarningIcon","alt","alignItems","Typography","fontSize","fontWeight","mr","mb","cursor","smallAvatar","palette","secondary","dark","ArrowUpwardIcon","transform","Dashboard","HttpClient","constructor","super","process","_initializeRequestInterceptor","this","instance","interceptors","request","use","config","headers","getTokenLocal","_initializeResponseInterceptor","response","Promise","resolve","DashboardConfig","ApiRoutes","Data","getDashboard","async","method","Method","url","Endpoint","data","bgColor","chartData","title","percentage","value","footerData","footerHtml","map","index","spacing","label","bgcolor","primary","Chart","dispatch","useDispatch","dashboardApi","DashboardApi","setLoading","useState","User","useSelector","state","dashBoard","totalUser","Order","totalOrder","natural","setNatural","labgrown","setLabgrown","UserTotal","month","total","current","length","OrderTotal","useCallback","dashboardData","lab","TotalUser","user","TotalOrder","order","toast","error","console","useEffect","UserOption","type","options","chart","sparkline","enabled","dataLabels","colors","fill","stroke","curve","yaxis","min","max","tooltip","fixed","x","show","y","formatter","marker","series","name","OrderOption","gridSpacing","xs","md","sm","lg","TotalLineChartCard"],"sourceRoot":""}