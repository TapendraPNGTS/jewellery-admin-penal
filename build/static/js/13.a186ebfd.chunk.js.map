{"version":3,"file":"static/js/13.a186ebfd.chunk.js","mappings":"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","sources":["apis/order.api.js","views/utilities/Orders/viewOders.js"],"sourcesContent":["import { getTokenLocal } from \"../utils/localStorage.util\";\r\nimport ApiRoutes from \"../configs/endpoints.config\";\r\nimport HttpClient from \"./index.api\";\r\nconst baseURL = process.env.REACT_APP_API_URL;\r\nconst AuthKey = process.env.REACT_APP_AUTH_KEY;\r\n\r\nclass User extends HttpClient {\r\n  constructor() {\r\n    super(baseURL);\r\n    this._initializeRequestInterceptor();\r\n    this._initializeResponseInterceptor();\r\n  }\r\n\r\n  _initializeRequestInterceptor = () => {\r\n    this.instance.interceptors.request.use((config) => {\r\n      config.headers[\"Authorization\"] = `Bearer ${getTokenLocal()}`;\r\n      config.headers[\"AuthKey\"] = `${AuthKey}`;\r\n      return config;\r\n    });\r\n  };\r\n\r\n  _initializeResponseInterceptor = () => {\r\n    this.instance.interceptors.response.use(\r\n      (response) => {\r\n        return response;\r\n      },\r\n      (response) => {\r\n        return Promise.resolve(response);\r\n      }\r\n    );\r\n  };\r\n\r\n  AllOrderConfig = ApiRoutes.Orders.AllOrder;\r\n  OrderByIdConfig = ApiRoutes.Orders.OrderDetails;\r\n  AllLeadsConfig = ApiRoutes.Orders.AllLeads;\r\n  LeadsByIdConfig = ApiRoutes.Orders.LeadsById;\r\n\r\n  getAllLeads = async () => {\r\n    return this.instance({\r\n      method: this.AllLeadsConfig.Method,\r\n      url: this.AllLeadsConfig.Endpoint,\r\n      headers: {},\r\n      data: null,\r\n    });\r\n  };\r\n  getLeadsById = async (data) => {\r\n    return this.instance({\r\n      method: this.LeadsByIdConfig.Method,\r\n      url: this.LeadsByIdConfig.Endpoint,\r\n      headers: {},\r\n      data: data,\r\n    });\r\n  };\r\n  getAllOrder = async () => {\r\n    return this.instance({\r\n      method: this.AllOrderConfig.Method,\r\n      url: this.AllOrderConfig.Endpoint,\r\n      headers: {},\r\n      data: null,\r\n    });\r\n  };\r\n  getOrderById = async (data) => {\r\n    return this.instance({\r\n      method: this.OrderByIdConfig.Method,\r\n      url: this.OrderByIdConfig.Endpoint,\r\n      headers: {},\r\n      data: data,\r\n    });\r\n  };\r\n}\r\n\r\nexport default User;\r\n","import React, { useEffect, useCallback, useState } from \"react\";\r\n// material-ui\r\nimport {\r\n  Grid,\r\n  Card,\r\n  TableRow,\r\n  TablePagination,\r\n  Paper,\r\n  TextField,\r\n  TableCell,\r\n  Table,\r\n  TableHead,\r\n  TableBody,\r\n  TableContainer,\r\n  Typography,\r\n} from \"@mui/material\";\r\n\r\n// project imports\r\nimport MainCard from \"ui-component/cards/MainCard\";\r\nimport { gridSpacing } from \"store/constant\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { toast } from \"react-hot-toast\";\r\nimport OrderApi from \"apis/order.api\";\r\n\r\nfunction App() {\r\n  const params = useParams();\r\n  const orderApi = new OrderApi();\r\n\r\n  const [rows, setRows] = React.useState([]);\r\n  const [fName, setFName] = React.useState('');\r\n  const [lName, setLName] = React.useState('');\r\n  const [email, setEmail] = React.useState('');\r\n  const [search, setSearch] = React.useState(\"\");\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(+event.target.value);\r\n    setPage(0);\r\n  };\r\n\r\n  const getAllUser = useCallback(async () => {\r\n    try {\r\n      const users = await orderApi.getOrderById({\r\n        cartId: params.id,\r\n      });\r\n      if (!users || !users.data.data) {\r\n        return toast.error(\"no latest data available\");\r\n      } else {\r\n        setRows(users.data.data.item);\r\n        setFName(users.data.data.userId.firstName);\r\n        setLName(users.data.data.userId.lastName);\r\n        setEmail(users.data.data.userId.email);\r\n        return toast.success(\"Latest data available\");\r\n      }\r\n    } catch (error) {\r\n      // console.error(error);\r\n      toast.error(\"Something went wrong\");\r\n      throw error;\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    getAllUser();\r\n  }, []);\r\n\r\n  function formatDate(date) {\r\n    return new Date(date).toLocaleString(\"en-us\", {\r\n      day: \"numeric\",\r\n      month: \"short\",\r\n      year: \"numeric\",\r\n    });\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <MainCard title=\"Order Details\">\r\n        <Grid container spacing={gridSpacing}>\r\n          <Grid\r\n            item\r\n            container\r\n            spacing={{ xs: 2, md: 3 }}\r\n            columns={{ xs: 4, sm: 8, md: 8 }}\r\n          >\r\n            <Grid item>\r\n              <Typography variant=\"h4\">\r\n                Name : &nbsp;&nbsp;{fName} &nbsp;{lName+' ,'}\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item>\r\n              <Typography variant=\"h4\">\r\n              Email : &nbsp;&nbsp; {email+' ,'}\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </MainCard>\r\n      <MainCard\r\n        title={\r\n          <Grid\r\n            container\r\n            alignItems=\"center\"\r\n            justifyContent=\"space-between\"\r\n            spacing={gridSpacing}\r\n          >\r\n            <Grid item xs={12} md={12}>\r\n              <TextField\r\n                fullWidth\r\n                id=\"outlined-search\"\r\n                label=\"Search field\"\r\n                type=\"search\"\r\n                onChange={(e) => {\r\n                  setSearch(e.target.value);\r\n                }}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        }\r\n        content={false}\r\n      >\r\n        {rows ? (\r\n          <Card>\r\n            <Paper sx={{ width: \"100%\", overflow: \"hidden\" }}>\r\n              <TableContainer sx={{ maxHeight: 540 }}>\r\n                <Table stickyHeader aria-label=\"sticky table\">\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell sx={{ pl: 3 }}>Sr No.</TableCell>\r\n                      <TableCell>Item Name</TableCell>\r\n                      <TableCell>Price</TableCell>\r\n                      <TableCell>Total Price</TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {rows\r\n                      .filter((row) =>\r\n                        search.toLowerCase() === \"\"\r\n                          ? row\r\n                          : row?.name?.toLowerCase().includes(search)\r\n                      )\r\n                      .slice(\r\n                        page * rowsPerPage,\r\n                        page * rowsPerPage + rowsPerPage\r\n                      )\r\n                      .map((row, index) => {\r\n                        return (\r\n                          <TableRow\r\n                            hover\r\n                            role=\"checkbox\"\r\n                            tabIndex={-1}\r\n                            key={index}\r\n                          >\r\n                            <TableCell align=\"start\">{index + 1}</TableCell>\r\n                            <TableCell align=\"start\">\r\n                              {row?.name ? row.name : \"-\"}\r\n                            </TableCell>\r\n                            <TableCell align=\"start\">\r\n                              {row?.price ? row.price.toFixed(2) : \"-\"}\r\n                            </TableCell>\r\n                            <TableCell align=\"start\">\r\n                              {row?.totalPrice\r\n                                ? row.totalPrice.toFixed(2)\r\n                                : \"-\"}\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        );\r\n                      })}\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n              <TablePagination\r\n                rowsPerPageOptions={[10, 20, 100]}\r\n                component=\"div\"\r\n                count={rows.length}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                onPageChange={handleChangePage}\r\n                onRowsPerPageChange={handleChangeRowsPerPage}\r\n              />\r\n            </Paper>\r\n          </Card>\r\n        ) : (\r\n          <h6>Loading...</h6>\r\n        )}\r\n      </MainCard>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"names":["User","HttpClient","constructor","super","process","_initializeRequestInterceptor","this","instance","interceptors","request","use","config","headers","getTokenLocal","_initializeResponseInterceptor","response","Promise","resolve","AllOrderConfig","ApiRoutes","Orders","AllOrder","OrderByIdConfig","OrderDetails","AllLeadsConfig","AllLeads","LeadsByIdConfig","LeadsById","getAllLeads","async","method","Method","url","Endpoint","data","getLeadsById","getAllOrder","getOrderById","params","useParams","orderApi","OrderApi","rows","setRows","React","fName","setFName","lName","setLName","email","setEmail","search","setSearch","page","setPage","rowsPerPage","setRowsPerPage","getAllUser","useCallback","users","cartId","id","item","userId","firstName","lastName","toast","success","error","useEffect","_jsxs","_Fragment","children","_jsx","MainCard","title","Grid","container","spacing","gridSpacing","xs","md","columns","sm","Typography","variant","alignItems","justifyContent","TextField","fullWidth","label","type","onChange","e","target","value","content","Card","Paper","sx","width","overflow","TableContainer","maxHeight","Table","stickyHeader","TableHead","TableRow","TableCell","pl","TableBody","filter","row","_row$name","toLowerCase","name","includes","slice","map","index","hover","role","tabIndex","align","price","toFixed","totalPrice","TablePagination","rowsPerPageOptions","component","count","length","onPageChange","handleChangePage","event","newPage","onRowsPerPageChange"],"sourceRoot":""}