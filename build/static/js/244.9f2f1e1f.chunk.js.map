{"version":3,"file":"static/js/244.9f2f1e1f.chunk.js","mappings":"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","sources":["views/utilities/users/user.js"],"sourcesContent":["import React, { useCallback } from \"react\";\n// material-ui\nimport { Card, Grid, Typography, Button, Chip } from \"@mui/material\";\nimport Paper from \"@mui/material/Paper\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport EditIcon from \"@mui/icons-material/Edit\";\nimport { IconButton } from \"@mui/material\";\nimport { Link } from \"react-router-dom\";\n// project imports\nimport MainCard from \"ui-component/cards/MainCard\";\nimport { gridSpacing } from \"store/constant\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TablePagination from \"@mui/material/TablePagination\";\nimport TableRow from \"@mui/material/TableRow\";\nimport { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport TextField from \"@mui/material/TextField\";\n\nimport { toast } from \"react-hot-toast\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport UserApi from \"apis/user.api\";\nimport { updateAllUser } from \"redux/redux-slice/user.slice\";\n\n// ===============================|| COLOR BOX ||=============================== //\n// ===============================|| UI COLOR ||=============================== //\nexport default function Users() {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const userApi = new UserApi();\n\n  const rows = useSelector((state) => state.user.User);\n  const authToken = useSelector((state) => state.user.x_auth_token);\n  // console.log('Auth token', authToken);\n  const [search, setSearch] = React.useState(\"\");\n\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  // const handleDelete = async (userId) => {\n  //   try {\n  //     const deleteUserResponse = await userApi.deleteUser({ userId });\n  //     if (deleteUserResponse && deleteUserResponse?.data?.code === 200) {\n  //       getAllUser();\n  //       return toast.success(\"Deleted Successfully\");\n  //     } else {\n  //       return toast.error(deleteUserResponse.data?.message);\n  //     }\n  //   } catch (error) {\n  //     console.error(error);\n  //     toast.error(\"Something went wrong\");\n  //     throw error;\n  //   }\n  // };\n\n  console.log(\"authToken\", authToken);\n  const getAllUser = useCallback(async () => {\n    try {\n      const users = await userApi.getAllUser({authToken});\n      if (!users || !users.data.data) {\n        return toast.error(\"no latest users available\");\n      } else {\n        dispatch(updateAllUser(users.data.data));\n        return;\n      }\n    } catch (error) {\n      console.error(error);\n      toast.error(\"Something went wrong\");\n      throw error;\n    }\n  });\n\n  useEffect(() => {\n    getAllUser();\n  }, []);\n\n  function formatDate(date) {\n    return new Date(date).toLocaleString(\"en-us\", {\n      day: \"numeric\",\n      month: \"short\",\n      year: \"numeric\",\n    });\n  }\n\n  return (\n    <>\n      <MainCard\n        title={\n          <Grid\n            container\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n            spacing={gridSpacing}\n          >\n            <Grid item xs={12} md={12}>\n              <TextField\n                fullWidth\n                id=\"outlined-search\"\n                label=\"Search field\"\n                type=\"search\"\n                onChange={(e) => {\n                  setSearch(e.target.value);\n                }}\n              />\n            </Grid>\n          </Grid>\n        }\n        content={false}\n      >\n        {rows ? (\n          <Card>\n            <Paper sx={{ width: \"100%\", overflow: \"hidden\" }}>\n              <TableContainer sx={{ maxHeight: 540 }}>\n                <Table stickyHeader aria-label=\"sticky table\">\n                  <TableHead>\n                    <TableRow>\n                      <TableCell sx={{ pl: 3 }}>S No.</TableCell>\n                      {/* <TableCell>User Id</TableCell> */}\n                      <TableCell>First Name</TableCell>\n                      <TableCell>Last Name</TableCell>\n                      <TableCell>Email</TableCell>\n                      <TableCell>Action</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {rows\n                      .filter((row) =>\n                        search.toLowerCase() === \"\"\n                          ? row\n                          : row.title.toLowerCase().includes(search)\n                      )\n                      .slice(\n                        page * rowsPerPage,\n                        page * rowsPerPage + rowsPerPage\n                      )\n                      .map((row, index) => {\n                        return (\n                          <TableRow\n                            hover\n                            role=\"checkbox\"\n                            tabIndex={-1}\n                            key={index}\n                          >\n                            <TableCell align=\"start\">{index + 1}</TableCell>\n                            {/* <TableCell align=\"start\">{row.userId}</TableCell> */}\n                            <TableCell align=\"start\">{row.firstName}</TableCell>\n                            <TableCell align=\"start\">{row.lastName}</TableCell>\n                            <TableCell align=\"start\">{row.email}</TableCell>\n                            <TableCell>\n                              <Link to={`/edit-user/${row.userId}`}>\n                                <IconButton\n                                  color=\"primary\"\n                                  aria-label=\"view\"\n                                  size=\"large\"\n                                >\n                                  <EditIcon sx={{ fontSize: \"1.1rem\" }} />\n                                </IconButton>\n                              </Link>\n                              {/* <IconButton\n                                onClick={(e) => {\n                                  handleDelete(row.userId);\n                                }}\n                                color=\"primary\"\n                                aria-label=\"view\"\n                                size=\"large\"\n                              >\n                                <DeleteIcon sx={{ fontSize: \"1.1rem\" }} />\n                              </IconButton> */}\n                            </TableCell>\n                          </TableRow>\n                        );\n                      })}\n                  </TableBody>\n                </Table>\n              </TableContainer>\n              <TablePagination\n                rowsPerPageOptions={[10, 20, 100]}\n                component=\"div\"\n                count={rows.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onPageChange={handleChangePage}\n                onRowsPerPageChange={handleChangeRowsPerPage}\n              />\n            </Paper>\n          </Card>\n        ) : (\n          <h6>Loading...</h6>\n        )}\n      </MainCard>\n    </>\n  );\n}\n"],"names":["Users","useNavigate","dispatch","useDispatch","userApi","UserApi","rows","useSelector","state","user","User","authToken","x_auth_token","search","setSearch","React","page","setPage","rowsPerPage","setRowsPerPage","useState","console","log","getAllUser","useCallback","async","users","data","updateAllUser","toast","error","useEffect","_jsx","_Fragment","children","MainCard","title","Grid","container","alignItems","justifyContent","spacing","gridSpacing","item","xs","md","TextField","fullWidth","id","label","type","onChange","e","target","value","content","Card","_jsxs","Paper","sx","width","overflow","TableContainer","maxHeight","Table","stickyHeader","TableHead","TableRow","TableCell","pl","TableBody","filter","row","toLowerCase","includes","slice","map","index","hover","role","tabIndex","align","firstName","lastName","email","Link","to","userId","IconButton","color","size","EditIcon","fontSize","TablePagination","rowsPerPageOptions","component","count","length","onPageChange","handleChangePage","event","newPage","onRowsPerPageChange"],"sourceRoot":""}