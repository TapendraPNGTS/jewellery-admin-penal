{"version":3,"file":"static/js/244.8ab8c744.chunk.js","mappings":"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","sources":["views/utilities/users/user.js"],"sourcesContent":["import React, { useCallback } from \"react\";\r\n// material-ui\r\nimport { Card, Grid, Typography, Button, Chip } from \"@mui/material\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport EditIcon from \"@mui/icons-material/Edit\";\r\nimport { IconButton } from \"@mui/material\";\r\nimport { Link } from \"react-router-dom\";\r\n// project imports\r\nimport MainCard from \"ui-component/cards/MainCard\";\r\nimport { gridSpacing } from \"store/constant\";\r\nimport Table from \"@mui/material/Table\";\r\nimport TableBody from \"@mui/material/TableBody\";\r\nimport TableCell from \"@mui/material/TableCell\";\r\nimport TableContainer from \"@mui/material/TableContainer\";\r\nimport TableHead from \"@mui/material/TableHead\";\r\nimport TablePagination from \"@mui/material/TablePagination\";\r\nimport TableRow from \"@mui/material/TableRow\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport TextField from \"@mui/material/TextField\";\r\n\r\nimport { toast } from \"react-hot-toast\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport UserApi from \"apis/user.api\";\r\nimport { updateAllUser } from \"redux/redux-slice/user.slice\";\r\n\r\n// ===============================|| COLOR BOX ||=============================== //\r\n// ===============================|| UI COLOR ||=============================== //\r\nexport default function Users() {\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n  const userApi = new UserApi();\r\n\r\n  const rows = useSelector((state) => state.user.User);\r\n  const [search, setSearch] = React.useState(\"\");\r\n\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(+event.target.value);\r\n    setPage(0);\r\n  };\r\n\r\n  const handleDelete = async (userId) => {\r\n    try {\r\n      const deleteUserResponse = await userApi.deleteUser({ userId });\r\n      if (deleteUserResponse && deleteUserResponse?.data?.code === 200) {\r\n        getAllUser();\r\n        return toast.success(\"Deleted Successfully\");\r\n      } else {\r\n        return toast.error(deleteUserResponse.data?.message);\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      toast.error(\"Something went wrong\");\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const getAllUser = useCallback(async () => {\r\n    try {\r\n      const users = await userApi.getAllUser();\r\n      if (!users || !users.data.data) {\r\n        return toast.error(\"no latest users available\");\r\n      } else {\r\n        dispatch(updateAllUser(users.data.data));\r\n        return;\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      toast.error(\"Something went wrong\");\r\n      throw error;\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    getAllUser();\r\n  }, []);\r\n\r\n  function formatDate(date) {\r\n    return new Date(date).toLocaleString(\"en-us\", {\r\n      day: \"numeric\",\r\n      month: \"short\",\r\n      year: \"numeric\",\r\n    });\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <MainCard\r\n        title={\r\n          <Grid\r\n            container\r\n            alignItems=\"center\"\r\n            justifyContent=\"space-between\"\r\n            spacing={gridSpacing}\r\n          >\r\n            <Grid item xs={12} md={12}>\r\n              <TextField\r\n                fullWidth\r\n                id=\"outlined-search\"\r\n                label=\"Search field\"\r\n                type=\"search\"\r\n                onChange={(e) => {\r\n                  setSearch(e.target.value);\r\n                }}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        }\r\n        content={false}\r\n      >\r\n        {rows ? (\r\n          <Card>\r\n            <Paper sx={{ width: \"100%\", overflow: \"hidden\" }}>\r\n              <TableContainer sx={{ maxHeight: 540 }}>\r\n                <Table stickyHeader aria-label=\"sticky table\">\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell sx={{ pl: 3 }}>S No.</TableCell>\r\n                      <TableCell>Date Time</TableCell>\r\n                      <TableCell>Name</TableCell>\r\n                      <TableCell>Email</TableCell>\r\n                      <TableCell>Contact</TableCell>\r\n                      <TableCell>Type</TableCell>\r\n                      <TableCell>Action</TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {rows\r\n                      .filter((row) =>\r\n                        search.toLowerCase() === \"\"\r\n                          ? row\r\n                          : row.title.toLowerCase().includes(search)\r\n                      )\r\n                      .slice(\r\n                        page * rowsPerPage,\r\n                        page * rowsPerPage + rowsPerPage\r\n                      )\r\n                      .map((row, index) => {\r\n                        return (\r\n                          <TableRow\r\n                            hover\r\n                            role=\"checkbox\"\r\n                            tabIndex={-1}\r\n                            key={index}\r\n                          >\r\n                            <TableCell align=\"start\">{index + 1}</TableCell>\r\n\r\n                            <TableCell align=\"start\">\r\n                              {row.createdAt ? formatDate(row.createdAt) : \"-\"}\r\n                            </TableCell>\r\n                            <TableCell align=\"start\">{row.name}</TableCell>\r\n                            <TableCell align=\"start\">{row.email}</TableCell>\r\n                            <TableCell align=\"start\">{row.number}</TableCell>\r\n                            <TableCell align=\"start\">{row.type}</TableCell>\r\n                            <TableCell>\r\n                              <Link to={`/edit-user/${row.userId}`}>\r\n                                <IconButton\r\n                                  color=\"primary\"\r\n                                  aria-label=\"view\"\r\n                                  size=\"large\"\r\n                                >\r\n                                  <EditIcon sx={{ fontSize: \"1.1rem\" }} />\r\n                                </IconButton>\r\n                              </Link>\r\n                              <IconButton\r\n                                onClick={(e) => {\r\n                                  handleDelete(row.userId);\r\n                                }}\r\n                                color=\"primary\"\r\n                                aria-label=\"view\"\r\n                                size=\"large\"\r\n                              >\r\n                                <DeleteIcon sx={{ fontSize: \"1.1rem\" }} />\r\n                              </IconButton>\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        );\r\n                      })}\r\n                  </TableBody>\r\n                </Table>\r\n              </TableContainer>\r\n              <TablePagination\r\n                rowsPerPageOptions={[10, 20, 100]}\r\n                component=\"div\"\r\n                count={rows.length}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                onPageChange={handleChangePage}\r\n                onRowsPerPageChange={handleChangeRowsPerPage}\r\n              />\r\n            </Paper>\r\n          </Card>\r\n        ) : (\r\n          <h6>Loading...</h6>\r\n        )}\r\n      </MainCard>\r\n    </>\r\n  );\r\n}\r\n"],"names":["Users","useNavigate","dispatch","useDispatch","userApi","UserApi","rows","useSelector","state","user","User","search","setSearch","React","page","setPage","rowsPerPage","setRowsPerPage","useState","getAllUser","useCallback","async","users","data","updateAllUser","toast","error","console","useEffect","_jsx","_Fragment","children","MainCard","title","Grid","container","alignItems","justifyContent","spacing","gridSpacing","item","xs","md","TextField","fullWidth","id","label","type","onChange","e","target","value","content","Card","_jsxs","Paper","sx","width","overflow","TableContainer","maxHeight","Table","stickyHeader","TableHead","TableRow","TableCell","pl","TableBody","filter","row","toLowerCase","includes","slice","map","index","hover","role","tabIndex","align","createdAt","date","Date","toLocaleString","day","month","year","name","email","number","Link","to","userId","IconButton","color","size","EditIcon","fontSize","onClick","_deleteUserResponse$d","deleteUserResponse","deleteUser","code","success","_deleteUserResponse$d2","message","handleDelete","DeleteIcon","TablePagination","rowsPerPageOptions","component","count","length","onPageChange","handleChangePage","event","newPage","onRowsPerPageChange"],"sourceRoot":""}